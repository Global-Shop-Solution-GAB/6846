Program.Sub.Preflight.Start
Program.External.Include.Library(1510.lib)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Bryan Pham
'07/22/2022
'Customer: DIVERSIFIED LABELING SOLUTIONS
'Scope: upload matl cost from Excel file
'DIV050-41320221054-0

Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout

f.Intrinsic.Control.CallSub(checkFolder)
f.Intrinsic.Control.CallSub(Upload)
Program.Sub.Main.End

Program.Sub.checkFolder.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare
v.Local.sFileTarget.Declare
v.Local.bExists.Declare

'create custom folder for backing up files
f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sFileTarget)
f.Intrinsic.File.DirExists(v.Local.sFileTarget,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,False)
	f.Intrinsic.File.CreateDir(v.Local.sFileTarget)
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\UPLOAD",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sFileTarget)
f.Intrinsic.File.DirExists(v.Local.sFileTarget,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,False)
	f.Intrinsic.File.CreateDir(v.Local.sFileTarget)
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\FINISHED",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sFileTarget)
f.Intrinsic.File.DirExists(v.Local.sFileTarget,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,False)
	f.Intrinsic.File.CreateDir(v.Local.sFileTarget)
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\BACKUP",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sFileTarget)
f.Intrinsic.File.DirExists(v.Local.sFileTarget,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,False)
	f.Intrinsic.File.CreateDir(v.Local.sFileTarget)
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\LOG",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sFileTarget)
f.Intrinsic.File.DirExists(v.Local.sFileTarget,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,False)
	f.Intrinsic.File.CreateDir(v.Local.sFileTarget)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\LOG\Error{2}.txt",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDate_Action,v.Local.sFileTarget)
	f.Intrinsic.File.String2File(v.local.sFileTarget,V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.checkFolder.End

Program.Sub.Upload.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare
v.Local.sFile.Declare
V.Local.iWorksheetCounter.Declare
V.Local.iRow.Declare
v.Local.iCnt.Declare
v.Local.sRow.Declare
v.Local.sPart.Declare
v.Local.sLocation.Declare
v.Local.fCost.Declare
v.Local.bExists.Declare
v.Local.sSQL.Declare
v.Local.sFileSource.Declare
V.Local.sFileTarget.Declare
v.Local.sDate.Declare
v.Local.fRet.Declare
v.Local.sDate_Acct_Yr.Declare
v.Local.sDate_Acct_Mo.Declare
v.Local.sDate_History.Declare
v.Local.sInv_Hist_Time.Declare
v.Local.sRet.Declare
v.Local.sCode_Transaction.Declare
v.Local.sTransaction_Desc.Declare
v.Local.sRefer_2.Declare
v.Local.sNew_Old_Onhand.Declare
v.Local.sNew_Old_Cost.Declare
v.Local.sBin.Declare
v.Local.sQuantity.Declare
v.Local.sCost.Declare
v.Local.sSeq.Declare
v.Local.sProduct_Line.Declare
v.Local.sDate_Action.Declare
v.Local.sProgram_A.Declare
v.Local.sIgnore_For_Usage.Declare
v.Local.sUserID.Declare
v.Local.sCost_Not_Upd.Declare
v.Local.sDtl_Key_Seq.Declare
v.Local.sMatl.Declare
v.Local.sLabor.Declare
v.Local.sOvhd.Declare
v.Local.sOuts.Declare
v.Local.sFreight.Declare
v.Local.sOth.Declare
v.Local.sEmail.Declare
v.Local.iUID.Declare
v.Local.sTemp.Declare
v.Local.sLog_NotFound.Declare
v.Local.sLog_Success.Declare
V.Local.sText.Declare
v.Local.sSubject.Declare
v.Local.sBody.Declare
v.Local.sDesc.Declare
v.Local.sContent.Declare

f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\UPLOAD\Matl_Cost_Upload.xlsx",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sFile)
f.Intrinsic.UI.InvokeWaitDialog("Uploading material cost...","Please wait!")
f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bExists)
f.ODBC.Connection!con.OpenCompanyConnection(900)
'==============================
'V.Local.sSQL.Set("SELECT A.PART, A.LOCATION, A.PRODUCT_LINE, A.DESCRIPTION, A.UM_INVENTORY, A.QTY_ONHAND, A.CODE_SORT, A.BIN, B.COST FROM V_INVENTORY_MSTR A JOIN V_INVENTORY_COST B ON A.PART = B.PART AND A.LOCATION = B.LOCN")
'F.ODBC.Connection!con.OpenRecordsetRO("rst",V.Local.sSQL)
'F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,False)
'	V.Local.sSQL.Set("Select * From INV_MO_END")
'	F.ODBC.Connection!con.OpenRecordsetRW("rstEND",V.Local.sSQL)
'	F.Intrinsic.Control.DoUntil(V.ODBC.con!rst.EOF,=,True)
'		F.ODBC.con!rstEND.AddNew
'		F.ODBC.con!rstEND.Set!DATE_RAN(V.Ambient.Now)
'		F.ODBC.con!rstEND.Set!PART(V.ODBC.con!rst.FieldValTrim!PART)
'		F.ODBC.con!rstEND.Set!LOCATION(V.ODBC.con!rst.FieldValTrim!LOCATION)
'		F.ODBC.con!rstEND.Set!PRODUCT_LINE(V.ODBC.con!rst.FieldValTrim!PRODUCT_LINE)
'		F.ODBC.con!rstEND.Set!DESCRIPTION(V.ODBC.con!rst.FieldValTrim!DESCRIPTION)
'		F.ODBC.con!rstEND.Set!UM(V.ODBC.con!rst.FieldValTrim!UM_INVENTORY)
'		F.ODBC.con!rstEND.Set!QTY_ONHAND(V.ODBC.con!rst.FieldValTrim!QTY_ONHAND)
'		F.ODBC.con!rstEND.Set!AMT_COST(V.ODBC.con!rst.FieldValTrim!COST)
'		F.ODBC.con!rstEND.Set!BIN(V.ODBC.con!rst.FieldValTrim!BIN)
'		F.ODBC.con!rstEND.Set!CODE_SORT(V.ODBC.con!rst.FieldValTrim!CODE_SORT)
'		F.ODBC.con!rstEND.Update
'		F.ODBC.con!rst.MoveNext
'	F.Intrinsic.Control.Loop
'	F.ODBC.con!rstEND.Close
'F.Intrinsic.Control.EndIf
'F.ODBC.con!rst.Close
'==============================
	
f.Intrinsic.Control.If(v.Local.bExists)
	f.Automation.MSExcel.ReadSpreadsheet(v.Local.sFile,"","",v.Local.sContent)
	f.Data.Datatable.CreateFromString("dtTemp",v.Local.sContent,"PART*!*LOCATION*!*NEWCOST","String*!*String*!*String","*!*","$!$")
	f.Data.DataView.Create("dtTemp","dvTemp",22,"PART <> ''","")
	f.Data.DataView.ToDataTableDistinct("dtTemp","dvTemp","dtFinal","PART*!*LOCATION*!*NEWCOST")
	'concatenate date to the file
	f.Intrinsic.String.Format(v.Ambient.Date,"MMDDYY",v.Local.sDate)
	f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\BACKUP\{2}ICOST-V0_{3}",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Caller.CompanyCode,v.Local.sDate,v.Local.sFileTarget)
	
	'original file
	f.Intrinsic.String.Build("{0}\FILES\{1}ICOST-V0",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sFileSource)
	'back up inv cost file
	F.Intrinsic.File.CopyFile(V.Local.sFileSource,V.Local.sFileTarget)
	
	'prepare the excel sheet to be read
'	F.Automation.MSExcel.CreateAppObject("MSExcel")
'	F.Automation.MSExcel.OpenWorkbook("MSEXcel","Workbook",v.Local.sFile)
'	f.Automation.MSExcel.GetWorksheetCount("Workbook",v.Local.iWorksheetCounter)
'	F.Automation.MSExcel.OpenWorksheet("Workbook","Worksheet",V.Local.iWorksheetCounter)
'	'get the rows of the current spreadsheet
'	F.Automation.MSExcel.RowCount("Worksheet",V.Local.iRow)
	Function.Intrinsic.String.Format(v.Ambient.Date,"YY",v.Local.sDate_Acct_Yr)
	Function.Intrinsic.String.Format(v.Ambient.date,"MM",v.Local.sDate_Acct_Mo)
	Function.Intrinsic.String.Format(v.Ambient.Date,"YYMMDD",v.Local.sDate_History)
	Function.Intrinsic.String.Format(v.Ambient.Time,"HHMMSSSS",v.Local.sInv_Hist_Time)
	v.Local.sCode_Transaction.Set("P18")
	v.local.sTransaction_Desc.Set("COST CHANGE")
	v.Local.sRefer_2.Set("REFERENCE ONLY")
	V.Local.sQuantity.Set("0.000000")
	v.Local.sCost.Set("0.000000")
	v.Local.sSeq.Set("000000")
	Function.Intrinsic.String.Format(v.Ambient.Date,"MMDDYY",v.Local.sDate_Action)
	v.Local.sProgram_A.Set("6846")
	v.Local.sIgnore_For_Usage.Set("0")
	v.Local.sUserID.Set(v.Caller.User)
	v.Local.sCost_Not_Upd.Set("0")
	v.Local.sDtl_Key_Seq.Set("0")
	
	'update INV_MO_END
	V.Local.sSQL.Set("SELECT A.PART, A.LOCATION, A.PRODUCT_LINE, A.DESCRIPTION, A.UM_INVENTORY, A.QTY_ONHAND, A.CODE_SORT, A.BIN, B.COST FROM V_INVENTORY_MSTR A JOIN V_INVENTORY_COST B ON A.PART = B.PART AND A.LOCATION = B.LOCN")
	F.ODBC.Connection!con.OpenRecordsetRO("rst",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,False)
		V.Local.sSQL.Set("Select * From INV_MO_END")
		F.ODBC.Connection!con.OpenRecordsetRW("rstEND",V.Local.sSQL)
		F.Intrinsic.Control.DoUntil(V.ODBC.con!rst.EOF,=,True)
			F.ODBC.con!rstEND.AddNew
			F.ODBC.con!rstEND.Set!DATE_RAN(V.Ambient.Now)
			F.ODBC.con!rstEND.Set!PART(V.ODBC.con!rst.FieldValTrim!PART)
			F.ODBC.con!rstEND.Set!LOCATION(V.ODBC.con!rst.FieldValTrim!LOCATION)
			F.ODBC.con!rstEND.Set!PRODUCT_LINE(V.ODBC.con!rst.FieldValTrim!PRODUCT_LINE)
			F.ODBC.con!rstEND.Set!DESCRIPTION(V.ODBC.con!rst.FieldValTrim!DESCRIPTION)
			F.ODBC.con!rstEND.Set!UM(V.ODBC.con!rst.FieldValTrim!UM_INVENTORY)
			F.ODBC.con!rstEND.Set!QTY_ONHAND(V.ODBC.con!rst.FieldValTrim!QTY_ONHAND)
			F.ODBC.con!rstEND.Set!AMT_COST(V.ODBC.con!rst.FieldValTrim!COST)
			F.ODBC.con!rstEND.Set!BIN(V.ODBC.con!rst.FieldValTrim!BIN)
			F.ODBC.con!rstEND.Set!CODE_SORT(V.ODBC.con!rst.FieldValTrim!CODE_SORT)
			F.ODBC.con!rstEND.Update
			F.ODBC.con!rst.MoveNext
		F.Intrinsic.Control.Loop
		F.ODBC.con!rstEND.Close
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rst.Close
	
	f.Intrinsic.Control.For(v.Local.iCnt,1,v.DataTable.dtFinal.RowCount--,1)
		v.Local.sPart.Set(v.DataTable.dtFinal(v.Local.iCnt).PART!FieldValTrim)
		v.Local.sLocation.Set(v.DataTable.dtFinal(v.Local.iCnt).LOCATION!FieldValTrim)
		v.Local.fCost.Set(v.DataTable.dtFinal(v.Local.iCnt).NEWCOST!FieldValTrim)
'	f.Intrinsic.Control.Next(v.Local.iCnt)
'	
'	f.Intrinsic.Control.For(v.Local.iCnt,2,v.Local.iRow,1)
'		'reads the sequence cell within the excel spreadsheet
'		F.Automation.MSExcel.ReadRow("Worksheet",V.Local.iCnt,1,3,V.local.sRow)
'		'set the local variables from the excel spreadsheet
'		F.Intrinsic.String.Split(V.Local.sRow,"*!*",V.Local.sRow)
'		v.Local.sPart.Set(v.Local.sRow(0))
'		v.Local.sLocation.Set(v.Local.sRow(1))
'		v.Local.fCost.Set(v.Local.sRow(2))
'	
'		
		f.Intrinsic.String.Build("SELECT A.PART, A.LOCATION, A.PRODUCT_LINE, A.DESCRIPTION, A.UM_INVENTORY, A.QTY_ONHAND, A.CODE_SORT, A.BIN, B.COST FROM V_INVENTORY_MSTR A JOIN V_INVENTORY_COST B ON A.PART = B.PART AND A.LOCATION = B.LOCN where RTRIM(A.PART) = '{0}' and A.LOCATION = '{1}';",v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF,=,False)

			'update cost
			f.Intrinsic.String.Build("Update INVENTORY_COST set MATL = {0} where PART = '{1}' and LOCN = '{2}'",v.Local.fCost,v.local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
			f.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.ODBC.Connection!con.Execute("Update INVENTORY_COST set COST = (MATL + LABOR + OVHD + OUTS + FREIGHT + OTH) where COST <> (MATL + LABOR + OVHD + OUTS + FREIGHT + OTH);")
				
			'create P18 records in INVENTORY_HIST
			f.Intrinsic.String.Build("SELECT IM.QTY_ONHAND, IC.COST, IM.BIN, IM.PRODUCT_LINE, IC.MATL, IC.LABOR, IC.OVHD, IC.OUTS, IC.FREIGHT, IC.OTH FROM INVENTORY_MSTR IM LEFT OUTER JOIN INVENTORY_COST IC ON IM.PART=IC.PART AND IM.LOCATION=IC.LOCN WHERE IM.PRODUCT_LINE in ('RM', 'PB', 'PC') and IM.PART = '{0}' and IM.LOCATION = '{1}';",v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
			f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF,=,False)
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			
				v.Local.sNew_Old_Onhand.Set(v.Local.sRet(0))
				v.Local.sNew_Old_Cost.Set(v.Local.sRet(1))
				v.Local.sBin.Set(v.Local.sRet(2))
				v.Local.sProduct_Line.Set(v.Local.sRet(3))
				v.Local.sMatl.Set(v.Local.sRet(4))
				v.Local.sLabor.Set(v.Local.sRet(5))
				v.Local.sOvhd.Set(v.Local.sRet(6))
				v.Local.sOuts.Set(v.Local.sRet(7))
				v.Local.sFreight.Set(v.Local.sRet(8))
				v.Local.sOth.Set(v.Local.sRet(9))
				Function.Intrinsic.String.Build("INSERT INTO INVENTORY_HIST (DATE_ACCT_YR, DATE_ACCT_MO, PART, LOCATION, DATE_HISTORY, INV_HIST_TIME, CODE_TRANSACTION, TRANSACTION_DESC, REFER_2, NEW_ONHAND, OLD_ONHAND, OLD_INV_COST, NEW_INV_COST, BIN, QUANTITY, COST, SEQ, PRODUCT_LINE, DATE_ACTION, PROGRAM_A, IGNORE_FOR_USAGE, USERID, COST_MATERIAL, COST_LABOR, COST_OVERHEAD, OUTS_COST, FREIGHT_COST, OTHER_COST, MATL_VAR, LABR_VAR, OVHD_VAR, OUTS_VAR, FRGT_VAR, OTH_VAR, OLD_MATL, OLD_LABR, OLD_OVHD, OLD_OUTS, OLD_FRGT, OLD_OTH, NEW_MATL, NEW_LABR, NEW_OVHD, NEW_OUTS, NEW_FRGT, NEW_OTH, COST_NOT_UPD, DTL_KEY_SEQ, T10_FRGT) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{9}','{10}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{13}','{13}','{13}','{13}','{13}','{13}','{13}','{13}','{13}','{13}','{13}','{13}','{22}','{23}','{24}','{25}','{26}','{27}','{22}','{23}','{24}','{25}','{26}','{27}','{20}','{21}','{26}');",v.Local.sDate_Acct_YR, v.Local.sDate_Acct_Mo,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sDate_History,v.Local.sInv_Hist_Time,v.Local.sCode_Transaction,v.Local.sTransaction_Desc,v.Local.sRefer_2,v.Local.sNew_Old_Onhand,v.Local.sNew_Old_Cost,v.Local.sBin,v.Local.sQuantity,v.Local.sCost,v.Local.sSeq,v.Local.sProduct_Line,v.Local.sDate_Action,v.Local.sProgram_A,v.Local.sIgnore_For_Usage,v.Local.sUserID,v.Local.sCost_Not_Upd,v.Local.sDtl_Key_Seq,v.Local.sMatl,v.Local.sLabor,v.Local.sOvhd,v.Local.sOuts,v.Local.sFreight,v.Local.sOth,v.Local.sSQL)
				f.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Local.sLog_Success,<>,"")
				f.Intrinsic.String.Build("{0}{1}{2}-{3}=====Update successfully",v.Local.sLog_Success,v.Ambient.NewLine,v.Local.sPart,v.Local.sLocation,v.Local.sLog_Success)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("{0}-{1}=====Update successfully",v.Local.sPart,v.Local.sLocation,v.Local.sLog_Success)
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.sLog_NotFound,<>,"")
				f.Intrinsic.String.Build("{0}{1}{2}-{3}=====Part Not Found",v.Local.sLog_NotFound,v.Ambient.NewLine,v.Local.sPart,v.Local.sLocation,v.Local.sLog_NotFound)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("{0}-{1}=====Part Not Found",v.Local.sPart,v.Local.sLocation,v.Local.sLog_NotFound)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
'	F.Automation.MSExcel.DestroyAllObjects("MSEXcel","Workbook","Worksheet")
	
	'write log
	f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\LOG\PartNotFound_{2}.txt",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDate_Action,v.Local.sFileTarget)
	f.Intrinsic.File.String2File(v.local.sFileTarget,v.Local.sLog_NotFound)
	f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\LOG\UpdateSuccessfully_{2}.txt",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDate_Action,v.Local.sFileTarget)
	f.Intrinsic.File.String2File(v.local.sFileTarget,v.Local.sLog_Success)
	
	'move upload file to FINISHED folder
	f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\FINISHED\Matl_Cost_Upload_{2}.xlxs",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDate_Action,v.Local.sFileTarget)
	f.Intrinsic.File.MoveFile(v.Local.sFile,v.Local.sFileTarget,v.Local.fRet)
	'F.Global.General.CallWrapperSync(50,"FIXMCOST")
	
	'Reprice router
	F.Data.DataTable.AddRow("1510","Mode","NS","BegRouter","","EndRouter","","AllRouter","Y","SetupFromWC","N","RuntimeFromWC","N","DescFromWC","N","DescFromInvMatl","N","DescFromInvRouter","N","PLFromInvRouter","N","RepriceLaborOnly","N","RepriceMatlOnly","N","UpdateAltCostRouter","N","AltCostRepriceQty","0","ZeroUCForMfgParts","N","RefreshLeadTimeMatl","N","RefreshLeadTimeOutside","N","UpdateRateWithInvCostIfZero","N","UpdateRateWithWCRateIfZero","N")
	f.Intrinsic.Control.CallSub(1510Sync)
f.Intrinsic.Control.Else

	'email
	F.Intrinsic.String.Build("{0}\GCG_6846_Email_Template.txt", V.Caller.GasDir, V.Local.sFile)
	F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,=,true)
		F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sText)
		f.Intrinsic.String.Split(v.Local.sText,"@!@",v.Local.sText)
		v.Local.sSubject.Set(v.Local.sText(0))
		v.Local.sBody.Set(v.Local.sText(1))
	F.Intrinsic.Control.EndIf
	f.Global.Security.GetGroupEmails("UPLMAT",v.Caller.CompanyCode,v.Local.sEmail)
	f.Intrinsic.String.Replace(v.Local.sEmail,"*!*","@!@",v.Local.sEmail)
	f.Global.Security.GetUserId(v.Caller.User,v.Caller.CompanyCode,v.Local.iUID)
	f.Intrinsic.Control.If(v.Local.sSubject,=,"",or,v.Local.sBody,=,"")
		f.Global.Messaging.QueueMessage(v.Caller.CompanyCode,v.Local.iUID,"6846 - Upload Matl Cost","Costs Not Uploaded","support@teamdls.com",v.Local.sEmail,"No cost file provided, costs were not uploaded.",5,,False,,,,,,,,,False)
	f.Intrinsic.Control.Else
		f.Global.Messaging.QueueMessage(v.Caller.CompanyCode,v.Local.iUID,"6846 - Upload Matl Cost",v.Local.sSubject,"support@teamdls.com",v.Local.sEmail,v.Local.sBody,5,,False,,,,,,,,,False)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.EndIf

f.ODBC.Connection!con.Close
f.Intrinsic.UI.CloseWaitDialog
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	f.Intrinsic.String.Build("{0}\CUSTOM\6846\{1}\LOG\Error{2}.txt",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDate_Action,v.Local.sFileTarget)
	f.Intrinsic.File.String2File(v.local.sFileTarget,V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.Upload.End

Program.Sub.Comments.Start
${$5$}$20.1.8398.25214$}$1
${$6$}$bpham$}$20230418212958882$}$Di0riF4Q5RIv6jxva5zSWHXcUtmDbQeBBVomWgBPrG7Kw52OFvNlZihIOJSWx1FJIexjMzadvtg=
Program.Sub.Comments.End